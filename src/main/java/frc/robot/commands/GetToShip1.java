/*----------------------------------------------------------------------------*/
/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot.commands;

import java.util.ArrayList;
import java.util.Arrays;

import edu.wpi.first.wpilibj.command.Command;
import frc.robot.Robot;

public class GetToShip1 extends Command {
  double mass = 40.0; // kg
  double moi = 20.0; // kg * m^2   //this is a number 254 code had, I figure it's close-ish. Definitely need tuning. Trying to account for scrub with this, not so great
  double wheelRadiusMeters = 0.0762; // m 
  double wheelBaseWidth = 0.8128; // m   //this is the effective wheel base width empirically 4/3 that of the physical wheel base width (24in --> 32in)
  double vIntercept = 0.67; //0.67 // V
  double R = 0.09160305; // ohms
  double kv = 46.51333;   // rad/s per V 
  double kt = 0.0183969466;   // N*m per A
  double g = 10.71; // gear reduction (g:1)
  int nMotors = 2; //number of motors in a gearbox

  double dt = 0.02;

 public double kPPos = 2.0;//2.0;
 public double kPVel = 2.0;//2.0;
 public double kPAng;//4.5;
 public double kPAngVel = 2.0;//2.0;

 public String fileName;
 
   public GetToShip1(double kpAng) {
       // Use requires() here to declare subsystem dependencies
   // eg. requires(chassis);
   this.kPAng = kpAng;
   
     requires(Robot.getDtSubsystem());
   }
   ArrayList<Double> voltagesLeft;
 ArrayList<Double> voltagesRight;
 ArrayList<Double> poses;
 ArrayList<Double> vels;
 ArrayList<Double> angs;
 ArrayList<Double> angVels;
 int index = 0;

 double disp, vel, ang, angVel;

  // Called just before this Command runs the first time
  @Override
  protected void initialize() {
    voltagesLeft = new ArrayList(
				Arrays.asList(-1.9959, -2.2036, -2.4112, -2.6189, -2.8266, -3.0342, -3.2419, -3.4495, -3.6572, -3.8649, -4.0725, -4.2802, -4.4879, -4.6955, -4.9032, -5.1109, -5.3185, -5.5262, -5.7339, -5.9415, -6.1492, -6.3569, -6.5645, -6.7722, -6.9799, -7.1876, -7.3953, -7.6030, -7.8107, -8.0184, -8.2261, -8.4339, -8.6416, -8.8493, -9.0571, -9.2649, -9.4727, -9.6804, -9.8883, -10.0961, -10.3039, -10.5118, -10.7197, -9.6008, -9.6009, -9.6010, -9.6012, -9.6013, -9.6015, -9.6016, -9.6018, -9.6019, -9.6021, -9.6023, -9.6025, -9.6027, -9.6029, -9.6031, -9.6033, -9.6035, -9.6037, -9.6040, -9.6042, -9.6044, -9.6047, -9.6049, -9.6052, -9.6054, -9.6057, -9.6059, -9.6062, -9.6065, -9.6068, -9.6071, -9.6074, -9.6077, -9.6080, -9.6083, -9.6086, -9.6089, -9.6092, -9.6095, -9.6099, -9.6102, -9.6105, -9.6109, -9.6112, -9.6116, -9.6119, -9.6123, -9.6126, -9.6130, -9.6134, -9.6137, -9.6141, -9.6145, -9.6148, -9.6152, -9.6156, -9.6160, -9.6164, -9.6168, -9.6172, -9.6176, -9.6180, -9.6184, -9.6188, -9.6192, -8.2785, -8.0705, -7.8624, -7.6544, -7.4463, -7.2381, -7.0300, -6.8218, -6.6137, -6.4055, -6.1973, -5.9891, -5.7808, -5.5726, -5.3643, -5.1560, -4.9477, -4.7394, -4.5311, -4.3228, -4.1145, -3.9061, -3.6978, -3.4894, -3.2811, -3.0727, -2.8643, -2.6560, -2.4476, -2.2392, -2.0308, -1.8224, -1.6141, -1.4057, -1.1973, -0.9889, -0.7805, -0.5721, -0.3638, -0.1554, 0.0530, 0.2613, 1.8097)
			);
			voltagesRight = new ArrayList(
				Arrays.asList(-2.2470, -2.4624, -2.6778, -2.8931, -3.1085, -3.3239, -3.5393, -3.7547, -3.9700, -4.1854, -4.4008, -4.6162, -4.8316, -5.0470, -5.2623, -5.4777, -5.6931, -5.9085, -6.1238, -6.3392, -6.5546, -6.7700, -6.9853, -7.2007, -7.4160, -7.6314, -7.8467, -8.0621, -8.2774, -8.4928, -8.7081, -8.9234, -9.1387, -9.3540, -9.5693, -9.7846, -9.9998, -10.2151, -10.4303, -10.6455, -10.8607, -11.0759, -11.2911, -9.9301, -9.9300, -9.9298, -9.9297, -9.9296, -9.9294, -9.9293, -9.9291, -9.9289, -9.9288, -9.9286, -9.9284, -9.9282, -9.9280, -9.9278, -9.9276, -9.9274, -9.9271, -9.9269, -9.9267, -9.9265, -9.9262, -9.9260, -9.9257, -9.9255, -9.9252, -9.9249, -9.9247, -9.9244, -9.9241, -9.9238, -9.9235, -9.9232, -9.9229, -9.9226, -9.9223, -9.9220, -9.9217, -9.9213, -9.9210, -9.9207, -9.9204, -9.9200, -9.9197, -9.9193, -9.9190, -9.9186, -9.9183, -9.9179, -9.9175, -9.9172, -9.9168, -9.9164, -9.9160, -9.9156, -9.9153, -9.9149, -9.9145, -9.9141, -9.9137, -9.9133, -9.9129, -9.9125, -9.9121, -9.9117, -8.3494, -8.1344, -7.9194, -7.7045, -7.4895, -7.2746, -7.0597, -6.8448, -6.6299, -6.4151, -6.2003, -5.9854, -5.7706, -5.5558, -5.3411, -5.1263, -4.9115, -4.6968, -4.4821, -4.2673, -4.0526, -3.8379, -3.6232, -3.4085, -3.1938, -2.9792, -2.7645, -2.5498, -2.3352, -2.1205, -1.9058, -1.6912, -1.4765, -1.2619, -1.0472, -0.8325, -0.6179, -0.4032, -0.1885, 0.0261, 0.2408, 0.4555, 2.0102)
			);
			poses = new ArrayList(
				Arrays.asList(-0.0014, -0.0042, -0.0084, -0.0140, -0.0210, -0.0294, -0.0392, -0.0504, -0.0630, -0.0770, -0.0924, -0.1092, -0.1274, -0.1470, -0.1680, -0.1904, -0.2142, -0.2394, -0.2660, -0.2940, -0.3234, -0.3542, -0.3864, -0.4200, -0.4550, -0.4914, -0.5292, -0.5684, -0.6090, -0.6510, -0.6944, -0.7392, -0.7854, -0.8330, -0.8820, -0.9324, -0.9842, -1.0374, -1.0920, -1.1480, -1.2054, -1.2642, -1.3244, -1.3846, -1.4448, -1.5050, -1.5652, -1.6254, -1.6856, -1.7458, -1.8060, -1.8662, -1.9264, -1.9866, -2.0468, -2.1070, -2.1672, -2.2274, -2.2876, -2.3478, -2.4080, -2.4682, -2.5284, -2.5886, -2.6488, -2.7090, -2.7692, -2.8294, -2.8896, -2.9498, -3.0100, -3.0702, -3.1304, -3.1906, -3.2508, -3.3110, -3.3712, -3.4314, -3.4916, -3.5518, -3.6120, -3.6722, -3.7324, -3.7926, -3.8528, -3.9130, -3.9732, -4.0334, -4.0936, -4.1538, -4.2140, -4.2742, -4.3344, -4.3946, -4.4548, -4.5150, -4.5752, -4.6354, -4.6956, -4.7558, -4.8160, -4.8762, -4.9364, -4.9966, -5.0568, -5.1170, -5.1772, -5.2374, -5.2962, -5.3536, -5.4096, -5.4642, -5.5174, -5.5692, -5.6196, -5.6686, -5.7162, -5.7624, -5.8072, -5.8506, -5.8926, -5.9332, -5.9724, -6.0102, -6.0466, -6.0816, -6.1152, -6.1474, -6.1782, -6.2076, -6.2356, -6.2622, -6.2874, -6.3112, -6.3336, -6.3546, -6.3742, -6.3924, -6.4092, -6.4246, -6.4386, -6.4512, -6.4624, -6.4722, -6.4806, -6.4876, -6.4932, -6.4974, -6.5002, -6.5016, -6.5016)
			);
			vels = new ArrayList(
				Arrays.asList(-0.0700, -0.1400, -0.2100, -0.2800, -0.3500, -0.4200, -0.4900, -0.5600, -0.6300, -0.7000, -0.7700, -0.8400, -0.9100, -0.9800, -1.0500, -1.1200, -1.1900, -1.2600, -1.3300, -1.4000, -1.4700, -1.5400, -1.6100, -1.6800, -1.7500, -1.8200, -1.8900, -1.9600, -2.0300, -2.1000, -2.1700, -2.2400, -2.3100, -2.3800, -2.4500, -2.5200, -2.5900, -2.6600, -2.7300, -2.8000, -2.8700, -2.9400, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -3.0100, -2.9400, -2.8700, -2.8000, -2.7300, -2.6600, -2.5900, -2.5200, -2.4500, -2.3800, -2.3100, -2.2400, -2.1700, -2.1000, -2.0300, -1.9600, -1.8900, -1.8200, -1.7500, -1.6800, -1.6100, -1.5400, -1.4700, -1.4000, -1.3300, -1.2600, -1.1900, -1.1200, -1.0500, -0.9800, -0.9100, -0.8400, -0.7700, -0.7000, -0.6300, -0.5600, -0.4900, -0.4200, -0.3500, -0.2800, -0.2100, -0.1400, -0.0700, 0.0000)
			);
			angs = new ArrayList(
				Arrays.asList(-0.0092, -0.0090, -0.0087, -0.0084, -0.0080, -0.0075, -0.0069, -0.0062, -0.0055, -0.0047, -0.0037, -0.0027, -0.0016, -0.0005, 0.0008, 0.0021, 0.0036, 0.0051, 0.0066, 0.0083, 0.0101, 0.0120, 0.0139, 0.0158, 0.0179, 0.0202, 0.0224, 0.0248, 0.0271, 0.0297, 0.0323, 0.0350, 0.0377, 0.0405, 0.0435, 0.0465, 0.0496, 0.0527, 0.0560, 0.0593, 0.0627, 0.0662, 0.0698, 0.0734, 0.0770, 0.0805, 0.0841, 0.0877, 0.0912, 0.0948, 0.0983, 0.1019, 0.1054, 0.1089, 0.1125, 0.1160, 0.1196, 0.1231, 0.1266, 0.1301, 0.1336, 0.1371, 0.1406, 0.1441, 0.1476, 0.1511, 0.1546, 0.1581, 0.1615, 0.1650, 0.1684, 0.1719, 0.1753, 0.1788, 0.1822, 0.1856, 0.1890, 0.1924, 0.1959, 0.1993, 0.2026, 0.2060, 0.2094, 0.2127, 0.2161, 0.2195, 0.2228, 0.2261, 0.2295, 0.2328, 0.2361, 0.2394, 0.2427, 0.2460, 0.2493, 0.2526, 0.2558, 0.2591, 0.2623, 0.2656, 0.2688, 0.2720, 0.2752, 0.2785, 0.2817, 0.2849, 0.2880, 0.2912, 0.2943, 0.2973, 0.3002, 0.3031, 0.3058, 0.3085, 0.3111, 0.3137, 0.3161, 0.3185, 0.3207, 0.3229, 0.3251, 0.3272, 0.3292, 0.3311, 0.3329, 0.3347, 0.3364, 0.3380, 0.3395, 0.3410, 0.3424, 0.3437, 0.3450, 0.3462, 0.3473, 0.3483, 0.3493, 0.3502, 0.3511, 0.3518, 0.3525, 0.3531, 0.3537, 0.3542, 0.3546, 0.3549, 0.3552, 0.3554, 0.3555, 0.3556, 0.3556)
			);
			angVels = new ArrayList(
				Arrays.asList(-0.4583, 0.0090, 0.0120, 0.0150, 0.0209, 0.0269, 0.0299, 0.0329, 0.0359, 0.0419, 0.0479, 0.0509, 0.0539, 0.0568, 0.0628, 0.0688, 0.0718, 0.0748, 0.0778, 0.0838, 0.0897, 0.0927, 0.0957, 0.0987, 0.1047, 0.1107, 0.1136, 0.1166, 0.1196, 0.1256, 0.1315, 0.1345, 0.1374, 0.1404, 0.1463, 0.1523, 0.1522, 0.1582, 0.1641, 0.1670, 0.1699, 0.1758, 0.1787, 0.1786, 0.1785, 0.1784, 0.1783, 0.1782, 0.1781, 0.1780, 0.1778, 0.1777, 0.1776, 0.1745, 0.1773, 0.1772, 0.1770, 0.1769, 0.1738, 0.1766, 0.1764, 0.1733, 0.1761, 0.1759, 0.1728, 0.1755, 0.1724, 0.1752, 0.1720, 0.1748, 0.1717, 0.1715, 0.1742, 0.1710, 0.1708, 0.1706, 0.1704, 0.1702, 0.1728, 0.1697, 0.1695, 0.1664, 0.1690, 0.1688, 0.1685, 0.1683, 0.1680, 0.1649, 0.1675, 0.1673, 0.1642, 0.1667, 0.1636, 0.1634, 0.1659, 0.1628, 0.1626, 0.1651, 0.1620, 0.1617, 0.1614, 0.1611, 0.1609, 0.1606, 0.1603, 0.1600, 0.1569, 0.1594, 0.1536, 0.1506, 0.1476, 0.1418, 0.1389, 0.1332, 0.1303, 0.1273, 0.1217, 0.1188, 0.1133, 0.1104, 0.1075, 0.1047, 0.0992, 0.0964, 0.0909, 0.0881, 0.0854, 0.0799, 0.0772, 0.0744, 0.0691, 0.0663, 0.0636, 0.0609, 0.0556, 0.0502, 0.0502, 0.0449, 0.0422, 0.0369, 0.0343, 0.0316, 0.0290, 0.0237, 0.0211, 0.0158, 0.0132, 0.0105, 0.0079, 0.0026, 0.0000)
			);
  }

  // Called repeatedly when this Command is scheduled to run
  int i = 0;
	boolean done = false;
	double deltaL, deltaR, deltaAng;
	double prevL = 0;
	double prevR = 0; //0.4787787m circum
	double prevAng = 0;
	public static double posError, velError, angError, angVelError;
	double drivenDistanceSensor = 0;
	double outputLeftVoltage, outputRightVoltage;
	
	protected void execute() {
		
    	if(i<voltagesRight.size()) {
			deltaL = Robot.getDtSubsystem().getLeftEncMeters() - prevL;
			deltaR = Robot.getDtSubsystem().getRightEncMeters() - prevR;
			deltaAng = Robot.getDtSubsystem().grabAngleRadians() - prevAng;
			//System.out.println(DD.composeTransformFromArcs(deltaL, deltaR).toText());
			drivenDistanceSensor += (deltaL + deltaR)/2;
			posError = poses.get(i) - (drivenDistanceSensor);
			velError = vels.get(i) - ((deltaL+deltaR)/2/dt);
			angError = angs.get(i) - Robot.getDtSubsystem().grabAngleRadians();
			angVelError = angVels.get(i) - (deltaAng/dt);
			
			outputLeftVoltage = voltagesLeft.get(i) + kPPos*posError + kPVel*velError - this.kPAng*angError - kPAngVel*angVelError;
			outputRightVoltage = voltagesRight.get(i)+ kPPos*posError + kPVel*velError + this.kPAng*angError + kPAngVel*angVelError;
			//System.out.println(Robot.getDtSubsystem().grabAngleRadians());
			Robot.getDtSubsystem().voltageDrive(outputLeftVoltage , outputRightVoltage);
			//System.out.println("LF: "+RobotMap.PDP.getCurrent(0) + "\t" + "LB: "+RobotMap.PDP.getCurrent(1) + "\t" + "RF: "+RobotMap.PDP.getCurrent(15) + "\t" + "RB: "+ RobotMap.PDP.getCurrent(14));
			prevL = Robot.getDtSubsystem().getLeftEncMeters();
			prevR = Robot.getDtSubsystem().getRightEncMeters();
			prevAng = Robot.getDtSubsystem().grabAngleRadians();
    		i++;
    	}else {
    		Robot.getDtSubsystem().motorReset();
    		done = true;
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return done;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
